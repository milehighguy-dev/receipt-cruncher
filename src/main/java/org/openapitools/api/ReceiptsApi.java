/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Receipt;
import org.openapitools.model.ReceiptsIdPointsGet200Response;
import org.openapitools.model.ReceiptsProcessPost200Response;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Validated
@Tag(name = "receipts", description = "the receipts API")
public interface ReceiptsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /receipts/{id}/points : Returns the points awarded for the receipt.
     * Returns the points awarded for the receipt.
     *
     * @param id The ID of the receipt. (required)
     * @return The number of points awarded. (status code 200)
     *         or No receipt found for that ID. (status code 404)
     */
    @Operation(
        operationId = "receiptsIdPointsGet",
        summary = "Returns the points awarded for the receipt.",
        description = "Returns the points awarded for the receipt.",
        responses = {
            @ApiResponse(responseCode = "200", description = "The number of points awarded.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ReceiptsIdPointsGet200Response.class))
            }),
            @ApiResponse(responseCode = "404", description = "No receipt found for that ID.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/receipts/{id}/points",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ReceiptsIdPointsGet200Response> receiptsIdPointsGet(
        @Pattern(regexp = "^\\S+$") @Parameter(name = "id", description = "The ID of the receipt.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"points\" : 100 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /receipts/process : Submits a receipt for processing.
     * Submits a receipt for processing.
     *
     * @param receipt  (required)
     * @return Returns the ID assigned to the receipt. (status code 200)
     *         or The receipt is invalid. (status code 400)
     */
    @Operation(
        operationId = "receiptsProcessPost",
        summary = "Submits a receipt for processing.",
        description = "Submits a receipt for processing.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns the ID assigned to the receipt.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ReceiptsProcessPost200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "The receipt is invalid.")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/receipts/process",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ReceiptsProcessPost200Response> receiptsProcessPost(
        @Parameter(name = "Receipt", description = "", required = true) @Valid @RequestBody Receipt receipt
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"adb6b560-0eef-42bc-9d16-df48f30e89b2\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
